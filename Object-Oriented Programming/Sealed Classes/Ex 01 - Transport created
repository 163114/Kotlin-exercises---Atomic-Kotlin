import atomictest.*

sealed class Transport  {
    abstract val capacity: Int
}

data class Train(
    val line: String,
    override val capacity: Int
) : Transport()

data class Bus(
    val number: String,
    override val capacity: Int
) : Transport()

data class Tram (
    val route: String,
    override val capacity: Int
) : Transport()

data class Plane (
    val flightNumber: String,
    override val capacity: Int
) : Transport()

fun travel(transport: Transport) {
    when (transport) {
        is Train ->
            "Train ${transport.line}"
        is Bus ->
            "Bus ${transport.number}: " +
                    "size ${transport.capacity}"
        is Tram ->
            "Tram ${transport.route}"
        is Plane ->
            "Plane ${transport.flightNumber}"
    }
    trace("size ${transport.capacity}")
}

fun main() {
    listOf(Train("S1", 200), Bus("11", 59), Tram("69", 50), Plane("666", 200)).forEach(::travel)
    trace eq """
  Train S1
  size 200
  Bus 11
  size 59
  Tram 69 Express
  size 50
  Plane 666
  size 200
  """
}
