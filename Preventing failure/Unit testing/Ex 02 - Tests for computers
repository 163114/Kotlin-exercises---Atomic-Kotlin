import atomictest.*
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import kotlin.test.assertEquals

interface Computer {
    fun prompt(): String
    fun calculateAnswer(): Int
}

class Desktop : Computer {
    override fun prompt() = "Hello!"
    override fun calculateAnswer() = 11
}

class DeepThought : Computer {
    override fun prompt() = "Thinking..."
    override fun calculateAnswer() = 42
}

class Quantum : Computer {
    override fun prompt() = "Probably..."
    override fun calculateAnswer() = -1
}

@Test
fun DesktopTest () {
    val desktop = Desktop()
    assertEquals("Hello!", desktop.prompt())
    assertEquals(11, desktop.calculateAnswer())
}
@Test
fun DeepThoughtTest () {
    val deepThought = DeepThought()
    assertEquals("Thinking...", deepThought.prompt())
    assertEquals(42, deepThought.calculateAnswer())
}
@Test
fun QuantumTest () {
    val quantum = Quantum()
    assertEquals("Probably...", quantum.prompt())
    assertEquals(-1, quantum.calculateAnswer())
}

fun main() {
    val computers = listOf(
        Desktop(), DeepThought(), Quantum()
    )
    computers.map { it.calculateAnswer() } eq
            "[11, 42, -1]"
    computers.map { it.prompt() } eq
            "[Hello!, Thinking..., Probably...]"
    DesktopTest()
    DeepThoughtTest()
    QuantumTest()
}
